{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAkBeA,EAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OAEI,yBAAKC,UAAU,uDAAf,IACI,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cADzB,eAEI,6BACI,4BAAKF,GACL,2BAAIC,MCYLK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAE,EAAF,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCC9BW,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACjB,OACI,6BACI,2BACAV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,IALd,MCOOI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAChEJ,EAAMK,WCiBJC,E,YApBZ,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHC,E,+EAQDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI7B,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAKX,MAAMK,a,GAjBMQ,aCsEbC,G,kBAhEX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJP,E,iFAQO,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC9BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEvB,OAAQmC,S,+BAQjC,IAAD,EAC2Bb,KAAKJ,MAA7BlB,EADH,EACGA,OAAQ4B,EADX,EACWA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAsB,IAAlBvC,EAAOyC,OACA,4CAGH,yBAAK7C,UAAU,MAAf,IACI,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAFlC,aAGI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAW1B,OAAQoC,IADvB,W,GAjCNZ,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.bea15ba9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\r\n    return (\r\n        \r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> {/* These are tachyon values, look them up */}\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />            {/* the \"?200x200\" makes the images always appear as 200 by 200 */}\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        < Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                            />\r\n                        );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue' \r\n            type=\"search\" \r\n            placeholder=\"search robots\" \r\n            onChange={searchChange}\r\n            /> {/* Adds some tachyon styling */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {             // every props object has children.\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '80vh'}}>                                 \r\n            {props.children}            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll\r\n\r\n// The props.children + the styling tags gives all props.children in scroll tags that styling","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n   constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n           hasError: false\r\n       }\r\n   } \r\n\r\n   // New lifecycle method is React 16, componentDidCatch()\r\n   componentDidCatch(error, info) {\r\n       this.setState({ hasError: true })\r\n   }\r\n\r\n   render() {\r\n    if (this.state.hasError) {\r\n        return <h1> Oooops. That is not good. </h1>\r\n    } \r\n    return this.props.children \r\n   }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\nclass App extends Component {           // In order to use state, we have to got back to the original way to create React Components\r\n    constructor() {\r\n        super()                 // To use \"this\" we need to add \"super\" which calls the contructor of component\r\n        this.state = {\r\n            robots: [],          \r\n            searchfield: '',         // this is what we want our state to be\r\n        }\r\n    }                        // To add state, just use a \"constructor\"\r\n    \r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n        .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {     // ******any time you make your own methods on a component, use this syntax*****\r\n        this.setState({ searchfield: event.target.value}) // any time you want to change state, you must put this method\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())    // If the name of the robots (in lower case or uppercase) include what is in the search field (in lower or upper case) then return the robots that return true to this\r\n        })                                     // ^^ this is not referring to the app because the input is occuring in a different scope(?)\r\n        if (robots.length === 0) {\r\n            return <h1> Loading... </h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\"> {/* Centers Everything */}\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange} /> {/* Because STATE(?) is an object, we have to use 'this' */}      {/* In order to get this to function we need to share information between the CardList & Searchbox */}\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList  robots={filteredRobots}/> {/* In order to do this, React has \"State\". This components are considered \"Pure Components\" because they are \"Deterministic\" and are passed down props. THey don't need to know anything other than the fact that are receiving something and returning something */}\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>              //^^^ robots can now be accessed through this syntax\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// render() {\r\n//     const { robots, searchfield } = this.state;\r\n//     const filteredRobots = robots.filter(robot =>{\r\n//         return robot.name.toLowerCase().includes(searchfield.toLowerCase())  \r\n//     })                                     \r\n//      return !robots.length ?\r\n//         <h1> Loading... </h1>\r\n//\r\n//         (\r\n//             <div className=\"tc\"> \r\n//                 <h1 className=\"f1\">RoboFriends</h1>\r\n//                 <SearchBox searchChange={this.onSearchChange} /> \r\n//                 <Scroll>\r\n//                     <CardList  robots={filteredRobots}/> \r\n//                 </Scroll>\r\n//             </div>              \r\n//         );\r\n//     \r\n// }\r\n\r\n// ^^^^^^^^^^^^^^ Cleaner Code (but more complicated to me) ^^^^^^^^^\r\n\r\nexport default App\r\n\r\n// \"State\" simple means the description of you App. State is simply an object, an object that describes your application. And this state is the robots and whatever is entered in the seach box\r\n// This state is able to change, we are able to change the value of the search box and the robots.\r\n// **** Props are simply things that come out of state ****\r\n// A parent feeds *State* to the child, and as soon as the child component receives the state it becomes a *Property/Prop*\r\n// The child can never change the property, the parent just tells it what the state is and the child receives it as a *prop*","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}